#include "main.h"

.global pulse_buffer
pulse_buffer: .skip 0x1000 // 1024 4-byte words (uint32_t)
                           // (0x0400 * 0x04)
			  .align 4

.global buffer_pos
buffer_pos:  .word 0
			 .align 4

.syntax unified

// ASM generated by gcc,
// cleaned up with symbol names substituted
// back in and comments added to tie to C code
.global TIMER0_IRQHandler
TIMER0_IRQHandler:
// ARM stack frame explanation: http://msdn.microsoft.com/en-us/library/aa448593.aspx

// save r7 on stack
	push {r7}
	add	r7, sp, #0

// r2 = buffer_pos
	mov	r3, #buffer_pos
	ldr	r2, [r3, #0]

// r1 = LPC_TIM0->IR
	mov	r3, #0x40004000	// LPC_TIM0->IR
	ldr	r3, [r3, #0]    // Read LPC_TIM0->IR from memory
	mov	r1, r3

// *(r3 + (r2 << 2)) = r1
// pulse_buffer[buffer_pos] = LPC_TIM0->IR
	mov r3, #pulse_buffer
	str.w r1, [r3, r2, lsl #2]

// LPC_TIM0->IR = 0xFF
	mov	r3, #0x40004000 // LPC_TIM0->IR
	movw r2, #0xFF
	str	r2, [r3, #0]

// r3 = buffer_pos
	mov r3, #buffer_pos
	ldr	r3, [r3, #0]

// r2 = buffer_pos + 1
	addw r2, r3, #1

// r3 = &buffer_pos
	mov r3, #buffer_pos

// buffer_pos = buffer_pos + 1
	str	r2, [r3, #0]

// r3 = buffer_pos
	mov r3, #buffer_pos
	ldr	r3, [r3, #0]

// Shift left 22 bits and then right
// 22 bits; equivalent of
//   buffer_pos &= 2^10 - 1
//             (BUFFER_LEN)
// r2 = (buffer_pos << 22)
 	mov.w	r2, r3, lsl #22
// r2 >>= 22
	mov.w	r2, r2, lsr #22

	// r2 = buffer_pos
	mov r3, #buffer_pos
	str	r2, [r3, #0]

// Unwind stack and return
	mov	sp, r7
	pop	{r7}
	bx	lr

// What is this NOP for? Needed? Alignment?
	nop
